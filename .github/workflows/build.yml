name: Build

on:
  push:
    branches:
      - master
  pull_request:
jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{matrix.os}}

    name: Build on ${{matrix.os}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: >
          sudo apt-get update &&
          sudo apt-get install
          gcc-multilib libzmq3-dev libczmq-dev libjson-c-dev
          libmsgpack-dev nodejs chromium-browser

      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ matrix.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: |
            ${{ matrix.os }}-gradle-

      - name: Validate Gradle Wrapper
        uses: gradle/wrapper-validation-action@v1

      - name: Build Linux
        if: matrix.os == 'ubuntu-latest'
        run: ./gradlew build check

      - name: Build Windows
        if: matrix.os == 'windows-latest'
        run: >-
          ./gradlew cinteropJsoncMingwX64 cinteropLibzmqMingwX64 linkDebugTestMingwX64;
          Copy-Item src/mingwX64Main/resources/bin/* build/bin/mingwX64/debugTest/;
          ./gradlew mingwX64Test linkReleaseSharedMingwX64 linkReleaseStaticMingwX64

      - name: Publish dev package
        run: ./gradlew publish -Pbintray_user=${{ secrets.BINTRAY_USER }} -Pbintray_api_key=${{ secrets.BINTRAY_API_KEY }}

      - name: Bundle the build report
        if: failure()
        run: find . -type d -name 'reports' | zip -@ -r build-reports.zip

      - name: Upload the build report
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: error-report
          path: build-reports.zip